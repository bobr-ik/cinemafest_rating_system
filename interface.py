import matplotlib.pyplot as plt
import numpy as np
from collections import defaultdict
import os


os.makedirs('–≥—Ä–∞—Ñ–∏–∫–∏', exist_ok=True)

# –í–∞—Ä–∏–∞–Ω—Ç 1: –°—Ç–æ–ª–±—á–∞—Ç–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ —Å—Ä–µ–¥–Ω–∏—Ö –æ—Ü–µ–Ω–æ–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∏–ª—å–º–∞
def plot_average_scores(data):
    fig, ax = plt.subplots(figsize=(12, 8))
    
    categories = list(data['—Ñ–∏–ª—å–º 1'].keys())
    films = list(data.keys())
    
    # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∏–ª—å–º–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    averages = {}
    for film in films:
        averages[film] = []
        for category in categories:
            scores = [rate['value'] for rate in data[film][category]]
            avg_score = sum(scores) / len(scores)
            averages[film].append(avg_score)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç–æ–ª–±—Ü–æ–≤
    x = np.arange(len(categories))
    width = 0.35
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç–æ–ª–±—Ü—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∏–ª—å–º–∞
    bars1 = ax.bar(x - width/2, averages['—Ñ–∏–ª—å–º 1'], width, label='–§–∏–ª—å–º 1', alpha=0.8)
    bars2 = ax.bar(x + width/2, averages['—Ñ–∏–ª—å–º 2'], width, label='–§–∏–ª—å–º 2', alpha=0.8)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞
    ax.set_xlabel('–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –æ—Ü–µ–Ω–∫–∏')
    ax.set_ylabel('–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞')
    ax.set_title('–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–∏—Ö –æ—Ü–µ–Ω–æ–∫ —Ñ–∏–ª—å–º–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º')
    ax.set_xticks(x)
    ax.set_xticklabels(categories)
    ax.legend()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
    for bar in bars1 + bars2:
        height = bar.get_height()
        ax.annotate(f'{height:.1f}',
                   xy=(bar.get_x() + bar.get_width() / 2, height),
                   xytext=(0, 3),
                   textcoords="offset points",
                   ha='center', va='bottom')
    
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.savefig('–≥—Ä–∞—Ñ–∏–∫–∏/—Å—Ç–æ–ª–±—á–∞—Ç–∞—è_–¥–∏–∞–≥—Ä–∞–º–º–∞_—Å—Ä–µ–¥–Ω–∏—Ö_–æ—Ü–µ–Ω–æ–∫.png')

# –í–∞—Ä–∏–∞–Ω—Ç 2: –†–∞–¥–∞—Ä–Ω–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Ñ–∏–ª—å–º–æ–≤
def plot_radar_chart(data):
    categories = list(data['—Ñ–∏–ª—å–º 1'].keys())
    N = len(categories)
    
    # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ä–µ–¥–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏
    avg_film1 = []
    avg_film2 = []
    for category in categories:
        scores1 = [rate['value'] for rate in data['—Ñ–∏–ª—å–º 1'][category]]
        scores2 = [rate['value'] for rate in data['—Ñ–∏–ª—å–º 2'][category]]
        avg_film1.append(sum(scores1) / len(scores1))
        avg_film2.append(sum(scores2) / len(scores2))
    
    # –£–≥–ª—ã –¥–ª—è —Ä–∞–¥–∞—Ä–Ω–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã
    angles = [n / float(N) * 2 * np.pi for n in range(N)]
    angles += angles[:1]  # –ó–∞–º—ã–∫–∞–µ–º –∫—Ä—É–≥
    
    avg_film1 += avg_film1[:1]
    avg_film2 += avg_film2[:1]
    
    fig, ax = plt.subplots(figsize=(10, 10), subplot_kw=dict(polar=True))
    
    # –†–∏—Å—É–µ–º –≥—Ä–∞—Ñ–∏–∫–∏
    ax.plot(angles, avg_film1, 'o-', linewidth=2, label='–§–∏–ª—å–º 1')
    ax.fill(angles, avg_film1, alpha=0.25)
    ax.plot(angles, avg_film2, 'o-', linewidth=2, label='–§–∏–ª—å–º 2')
    ax.fill(angles, avg_film2, alpha=0.25)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞
    ax.set_thetagrids(np.degrees(angles[:-1]), categories)
    ax.set_ylim(0, 10)
    ax.set_title('–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å–º–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –æ—Ü–µ–Ω–æ–∫', size=15, pad=20)
    ax.legend(loc='upper right')
    
    plt.tight_layout()
    plt.savefig('–≥—Ä–∞—Ñ–∏–∫–∏/—Ä–∞–¥–∞—Ä–Ω–∞—è_–¥–∏–∞–≥—Ä–∞–º–º–∞.png')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –æ–±—â–µ–π —Å—Ä–µ–¥–Ω–µ–π –æ—Ü–µ–Ω–∫–∏ —Ñ–∏–ª—å–º–∞
def calculate_overall_average(film_data):
    all_scores = []
    for category in film_data:
        for rate in film_data[category]:
            all_scores.append(rate['value'])
    return sum(all_scores) / len(all_scores) if all_scores else 0

# –í–∞—Ä–∏–∞–Ω—Ç 4: –ì—Ä–∞—Ñ–∏–∫ —Å—Ä–µ–¥–Ω–µ–π –æ—Ü–µ–Ω–∫–∏ –ø–æ –≤—Å–µ–º—É —Ñ–∏–ª—å–º—É
def plot_overall_average_scores(data):
    fig, ax = plt.subplots(figsize=(10, 6))
    
    films = list(data.keys())
    overall_averages = [calculate_overall_average(data[film]) for film in films]
    
    # –¶–≤–µ—Ç–∞ –¥–ª—è —Å—Ç–æ–ª–±—Ü–æ–≤
    colors = ['#FF6B6B', '#4ECDC4']
    
    # –°–æ–∑–¥–∞–µ–º —Å—Ç–æ–ª–±—Ü—ã
    bars = ax.bar(films, overall_averages, color=colors, alpha=0.8, edgecolor='black', linewidth=1)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞
    ax.set_xlabel('–§–∏–ª—å–º—ã')
    ax.set_ylabel('–°—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞')
    ax.set_title('–û–±—â–∞—è —Å—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ —Ñ–∏–ª—å–º–æ–≤', fontsize=16, pad=20)
    ax.set_ylim(0, 10)
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–µ—Ç–∫—É
    ax.grid(True, alpha=0.3, axis='y')
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
    for bar, value in zip(bars, overall_averages):
        height = bar.get_height()
        ax.annotate(f'{value:.2f}',
                   xy=(bar.get_x() + bar.get_width() / 2, height),
                   xytext=(0, 3),
                   textcoords="offset points",
                   ha='center', va='bottom',
                   fontsize=12, fontweight='bold')
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—É—é –ª–∏–Ω–∏—é –¥–ª—è —Å—Ä–µ–¥–Ω–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
    avg_all = sum(overall_averages) / len(overall_averages)
    ax.axhline(y=avg_all, color='red', linestyle='--', alpha=0.7, 
               label=f'–°—Ä–µ–¥–Ω–µ–µ –ø–æ –≤—Å–µ–º —Ñ–∏–ª—å–º–∞–º: {avg_all:.2f}')
    
    ax.legend()
    plt.tight_layout()
    plt.savefig('–≥—Ä–∞—Ñ–∏–∫–∏/–æ–±—â–∞—è_—Å—Ä–µ–¥–Ω—è—è_–æ—Ü–µ–Ω–∫–∞.png')
    
    # –í—ã–≤–æ–¥–∏–º —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    print("–û–±—â–∏–µ —Å—Ä–µ–¥–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏:")
    for film, avg in zip(films, overall_averages):
        print(f"{film}: {avg:.2f}")

# –í–∞—Ä–∏–∞–Ω—Ç 5: –ö—Ä—É–≥–æ–≤—ã–µ –¥–∏–∞–≥—Ä–∞–º–º—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∏–ª—å–º–∞
def plot_pie_charts_comparison(data):
    fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(15, 7))
    
    categories = list(data['—Ñ–∏–ª—å–º 1'].keys())
    colors = ['#FF9999', '#66B3FF', '#99FF99', '#FFCC99']
    
    # –î–ª—è –ø–µ—Ä–≤–æ–≥–æ —Ñ–∏–ª—å–º–∞
    film1_avgs = []
    for category in categories:
        scores = [rate['value'] for rate in data['—Ñ–∏–ª—å–º 1'][category]]
        film1_avgs.append(sum(scores) / len(scores))
    
    wedges1, texts1, autotexts1 = ax1.pie(film1_avgs, labels=categories, colors=colors,
                                         autopct='%1.1f%%', startangle=90)
    ax1.set_title('–§–∏–ª—å–º 1: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–∏—Ö –æ—Ü–µ–Ω–æ–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º', fontsize=14)
    
    # –î–ª—è –≤—Ç–æ—Ä–æ–≥–æ —Ñ–∏–ª—å–º–∞
    film2_avgs = []
    for category in categories:
        scores = [rate['value'] for rate in data['—Ñ–∏–ª—å–º 2'][category]]
        film2_avgs.append(sum(scores) / len(scores))
    
    wedges2, texts2, autotexts2 = ax2.pie(film2_avgs, labels=categories, colors=colors,
                                         autopct='%1.1f%%', startangle=90)
    ax2.set_title('–§–∏–ª—å–º 2: –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–∏—Ö –æ—Ü–µ–Ω–æ–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º', fontsize=14)
    
    # –î–µ–ª–∞–µ–º —Ü–µ–Ω—Ç—Ä –∫—Ä—É–≥–∞ –ø—É—Å—Ç—ã–º –¥–ª—è –ª—É—á—à–µ–≥–æ –≤–∏–¥–∞
    for ax in [ax1, ax2]:
        centre_circle = plt.Circle((0,0), 0.70, fc='white')
        ax.add_artist(centre_circle)
    
    plt.tight_layout()
    plt.savefig('–≥—Ä–∞—Ñ–∏–∫–∏/–∫—Ä—É–≥–æ–≤—ã–µ_–¥–∏–∞–≥—Ä–∞–º–º—ã.png')



def generate_md_report_with_graphs():
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç MD-—Ñ–∞–π–ª —Å–æ –≤—Å–µ–º–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–º–∏ –≥—Ä–∞—Ñ–∏–∫–∞–º–∏
    """
    md_content = """# üìä –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ü–µ–Ω–æ–∫ —Ñ–∏–ª—å–º–æ–≤

## üìà –ì—Ä–∞—Ñ–∏–∫–∏ –∞–Ω–∞–ª–∏–∑–∞ –æ—Ü–µ–Ω–æ–∫

–ù–∏–∂–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –≤—Å–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –≥—Ä–∞—Ñ–∏–∫–∏ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –æ—Ü–µ–Ω–æ–∫ —Ñ–∏–ª—å–º–æ–≤.

### 1. –°—Ä–µ–¥–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
![–°—Ä–µ–¥–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º](–≥—Ä–∞—Ñ–∏–∫–∏/—Å—Ç–æ–ª–±—á–∞—Ç–∞—è_–¥–∏–∞–≥—Ä–∞–º–º–∞_—Å—Ä–µ–¥–Ω–∏—Ö_–æ—Ü–µ–Ω–æ–∫.png)

*–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–∏—Ö –æ—Ü–µ–Ω–æ–∫ –¥–≤—É—Ö —Ñ–∏–ª—å–º–æ–≤ –ø–æ —Ä–∞–∑–ª–∏—á–Ω—ã–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º*

---

### 2. –†–∞–¥–∞—Ä–Ω–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è
![–†–∞–¥–∞—Ä–Ω–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞](–≥—Ä–∞—Ñ–∏–∫–∏/—Ä–∞–¥–∞—Ä–Ω–∞—è_–¥–∏–∞–≥—Ä–∞–º–º–∞.png)

*–í–∏–∑—É–∞–ª—å–Ω–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å–∏–ª—å–Ω—ã—Ö –∏ —Å–ª–∞–±—ã—Ö —Å—Ç–æ—Ä–æ–Ω —Ñ–∏–ª—å–º–æ–≤*

---

### 3. –û–±—â–∞—è —Å—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞ —Ñ–∏–ª—å–º–æ–≤
![–û–±—â–∞—è —Å—Ä–µ–¥–Ω—è—è –æ—Ü–µ–Ω–∫–∞](–≥—Ä–∞—Ñ–∏–∫–∏/–æ–±—â–∞—è_—Å—Ä–µ–¥–Ω—è—è_–æ—Ü–µ–Ω–∫–∞.png)

*–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤—ã—Ö —Å—Ä–µ–¥–Ω–∏—Ö –æ—Ü–µ–Ω–æ–∫ –ø–æ –≤—Å–µ–º —Ñ–∏–ª—å–º–∞–º*

---

### 4. –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–æ–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
![–ö—Ä—É–≥–æ–≤—ã–µ –¥–∏–∞–≥—Ä–∞–º–º—ã](–≥—Ä–∞—Ñ–∏–∫–∏/–∫—Ä—É–≥–æ–≤—ã–µ_–¥–∏–∞–≥—Ä–∞–º–º—ã.png)

*–ü—Ä–æ—Ü–µ–Ω—Ç–Ω–æ–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–∏—Ö –æ—Ü–µ–Ω–æ–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∏–ª—å–º–∞*

---

## üìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥—Ä–∞—Ñ–∏–∫–∞—Ö

–í—Å–µ –≥—Ä–∞—Ñ–∏–∫–∏ —Å–æ–∑–¥–∞–Ω—ã —Å –ø–æ–º–æ—â—å—é:
- **Python** —Å –±–∏–±–ª–∏–æ—Ç–µ–∫–∞–º–∏ matplotlib –∏ numpy
- **–†–∞–∑—Ä–µ—à–µ–Ω–∏–µ:** 300 DPI (–≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ)
- **–§–æ—Ä–º–∞—Ç:** PNG
- **–†–∞–∑–º–µ—Ä—ã:** –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞–Ω—ã –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏

–ì—Ä–∞—Ñ–∏–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–µ `–≥—Ä–∞—Ñ–∏–∫–∏/` –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏.
"""

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º MD-—Ñ–∞–π–ª
    with open('–æ—Ç—á–µ—Ç_—Å_–≥—Ä–∞—Ñ–∏–∫–∞–º–∏.md', 'w', encoding='utf-8') as f:
        f.write(md_content)
    
    print("MD-—Ñ–∞–π–ª —Å –≥—Ä–∞—Ñ–∏–∫–∞–º–∏ —Å–æ–∑–¥–∞–Ω: '–æ—Ç—á–µ—Ç_—Å_–≥—Ä–∞—Ñ–∏–∫–∞–º–∏.md'")
